<style type="text/css" media="screen">
    #source_code {
        width: 800px;
        height: 300px;
    }

    .ace_gutter-cell.ace_breakpoint {
        border-radius: 20px 0px 0px 20px;
        box-shadow: 0px 0px 1px 1px #800000 inset;
        background-color: #420D09;
    }
</style>

<form id="compile_form" action="/Compiler/Compile" method="post" class="ui form">
    <div class="ui segment basic">
        <img src="~/Content/Images/NEO_Logo.png" style="height:50px; float:left;" /><div style="display:inline-table; margin-top: 15px; margin-left: 10px; font-weight:bold;">NEO Web Debugger</div>
        <div class="field">
            <label>Source Code</label>

<div id="source_code" name="source_code">
using Neo.SmartContract.Framework.Services.Neo;
using Neo.SmartContract.Framework.Services.System;
using Neo.SmartContract.Framework;
using System.Numerics;
using System;

namespace Neo.SmartContract
{
    public class Contract1 : Framework.SmartContract
    {
        public static Object Main(string operation, params object[] args)
        {
            return "Hello world";
        }
    }
}
</div>

        </div>
        <div class="field">
            <button id="compile_button" class="ui button">Compile Contract</button>
        </div>
        <div class="field">
            Event Log
            <div class="ui segment" id="event_log" style="width:800px;">

            </div>
        </div>
    </div>
</form>

@section scripts
{
    <!-- SECTION TO DEFINE ALL SIGNALR WIREUP SCRIPTS FOR THE INTERFACE-->
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="/signalr/hubs"></script>

    <script type="text/javascript">
        $(function () {
            // Declare a proxy to reference the hub.
            var debug = $.connection.debuggerHub;

            // Create a function that the hub can call to broadcast log event messages.
            debug.client.logEventMessage = function (message) {
                //Html encode
                var encodedMessage = $('<div />').text(message).html();
                $('#event_log').append('<li>' + encodedMessage + '</li>');
            };

            $.connection.hub.start().done(function () {
                // Send the data using post
                $.post("/IDE/SetConnectionId", { connectionId: $.connection.hub.id });
            });
        });
    </script>
    <!-- END SIGNALR WIREUP SCRIPTS -->

    <script type="text/javascript">
        $(function () {
            //Wireup compile
            $("#compile_form").submit(function (event) {
                $("#event_log").html("");
                // Stop form from submitting normally
                event.preventDefault();

                // Get some values from elements on the page:
                var $form = $(this),
                    source = editor.getValue(),
                    url = $form.attr("action");

                // Send the data using post
                var posting = $.post(url, { source: source });

                // Put the results in a div
                posting.done(function (data) {
                    
                });
            });

            //Bind the editor
            var editor = ace.edit("source_code");
            editor.setTheme("ace/theme/tomorrow_night_bright");
            editor.session.setMode("ace/mode/csharp");

            editor.on("guttermousedown", function (e) {
                var target = e.domEvent.target;
                if (target.className.indexOf("ace_gutter-cell") == -1)
                    return;
                if (!editor.isFocused())
                    return;
                if (e.clientX > 25 + target.getBoundingClientRect().left)
                    return;

                var breakpoints = e.editor.session.getBreakpoints(row, 0);
                var row = e.getDocumentPosition().row;

                if (typeof breakpoints[row] === typeof undefined) {
                    e.editor.session.setBreakpoint(row);
                }           
                else
                {
                    e.editor.session.clearBreakpoint(row);
                }
                    
                e.stop();
            });

        });
    </script>
}